# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:light
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.16.4
#   kernelspec:
#     display_name: Python 3 (ipykernel)
#     language: python
#     name: python3
# ---

# ## Run with Python
#
#

# !python ps280edit.py

# ## Create App

# +
"""
Author: Werner Kaul-Gothe
Department: VPT
Organisation: Universit√§t der K√ºnste Berlin IAS
Date: 2025-02-20

Description:
This Python script automates the process of cleaning previous builds and compiling a Python project
into a standalone executable using PyInstaller. It removes old build artifacts, loads configuration
settings from a YAML file, and runs PyInstaller with the specified parameters.

Dependencies:
- os: Provides functionality to interact with the operating system.
- yaml: Loads configuration from YAML files.
- shutil: Enables removal of directories and their contents.
- subprocess: Allows execution of external commands.

Usage:
Run this script directly using Python:
    python build_script.py

Ensure that the `ps280edit.yaml` configuration file is in the same directory as this script.
"""

import os
import yaml
import shutil
import subprocess

# Print the current working directory for debugging purposes
print(f"Current Working Directory: {os.getcwd()}")

# Path to the YAML configuration file
CFG_FILE = 'ps280edit.yaml'

# Load configuration from the YAML file
with open(CFG_FILE, "r", encoding="utf-8") as file:
    config = yaml.safe_load(file)

def clean_old_builds(folders):
    """
    Remove previous build artifacts including 'build', 'dist', and '.spec' files.
    This ensures that a fresh build environment is used for each compilation.
    """
    for folder in folders:
        if os.path.exists(folder):
            print(f"üóëÔ∏è Removing {folder} directory...")
            shutil.rmtree(folder, ignore_errors=True)  # Deletes the folder and its contents

    # Remove any .spec files generated by previous builds
    for spec_file in os.listdir("."):
        if spec_file.endswith(".spec"):
            print(f"üóëÔ∏è Removing {spec_file}...")
            os.remove(spec_file)

def build_pyinstaller():
    """
    Execute PyInstaller to create a standalone executable based on the provided configuration.
    The script runs with specific flags:
        - --onedir: Creates a single-folder distribution.
        - --noconsole: Suppresses the console window (useful for GUI applications).
        - --add-data: Includes additional files specified in the config.
    """
    print("üöÄ Building with PyInstaller...")
    subprocess.run(["pyinstaller", 
    "--onedir", 
    "--noconsole", 
    "--add-data", f"{config['cfg_file']}:.", 
    "--add-data", f"{config['defaults']}:{config['defaults']}", 
    "--distpath", f"./{config['dist_dir']}", 
    "--workpath", f"./{config['temp_dir']}", 
    "--name", config['app_name'], 
    config['codebase']])

# Entry point of the script
if __name__ == "__main__":
    clean_old_builds([config['dist_dir'], config['temp_dir']])
    build_pyinstaller()
    clean_old_builds([config['temp_dir']]) # remove temp build directory
    print("‚úÖ Build completed successfully!")

# -


